{{- $rootPasswordFile := "/etc/mysql/password/root" }}
{{- $serviceUserPasswordFile := "/etc/mysql/password/serviceuser" }}
{{- $passwordFileMode := 0777 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mysql-cluster.fullname" . }}-server
  labels:
    {{- include "mysql-cluster.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.mysql.sqlNode.replicas }}
  serviceName: {{ include "mysql-cluster.fullname" . }}-server
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      {{- include "mysql-cluster.selectorLabels" . | nindent 6 }}
      nodeType: server
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mysql-cluster.selectorLabels" . | nindent 8 }}
        nodeType: server
    spec:
      containers:
        - name: mysql
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: {{ .Values.mysql.rootUser.password | default $rootPasswordFile }}
            {{- if .Values.mysql.serviceUser.userName }}
            - name: MYSQL_USER
              value: {{ .Values.mysql.serviceUser.userName }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mysql.serviceUser.password | default $serviceUserPasswordFile }}
            {{- end }}
          args:
            - mysqld
          ports:
            - name: server
              containerPort: {{ .Values.mysql.ports.mysqld }}
              protocol: TCP
{{/*          livenessProbe:*/}}
{{/*            initialDelaySeconds: 5*/}}
{{/*            tcpSocket:*/}}
{{/*              port: data*/}}
{{/*          readinessProbe:*/}}
{{/*            initialDelaySeconds: 15*/}}
{{/*            tcpSocket:*/}}
{{/*              port: data*/}}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/my.cnf
              subPath: my.cnf
              name: config
              readOnly: true
            - mountPath: {{ $rootPasswordFile }}
              subPath: root
              name: root-password
              readOnly: true
            {{- if .Values.mysql.serviceUser.userName }}
            - mountPath: {{ $serviceUserPasswordFile }}
              subPath: serviceuser
              name: serviceuser-password
              readOnly: true
            {{- end }}
      serviceAccountName: {{ include "mysql-cluster.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "mysql-cluster.fullname" . }}-server
        - name: root-password
          secret:
            {{- if .Values.mysql.rootUser.secret.name }}
            secretName: {{ .Values.mysql.rootUser.secret.name }}
            items:
              - key: {{ .Values.mysql.rootUser.secret.key }}
                path: root
                mode: {{ $passwordFileMode }}
            {{- else }}
            secretName: {{ include "mysql-cluster.fullname" . }}-rootuser
            items:
              - key: password
                path: root
                mode: {{ $passwordFileMode }}
            {{- end }}
        {{- if .Values.mysql.serviceUser.userName }}
        - name: serviceuser-password
          secret:
            {{- if .Values.mysql.serviceUser.secret.name }}
            secretName: {{ .Values.mysql.serviceUser.secret.name }}
            items:
              - key: {{ .Values.mysql.serviceUser.secret.key }}
                path: serviceuser
                mode: {{ $passwordFileMode }}
            {{- else }}
            secretName: {{ include "mysql-cluster.fullname" . }}-serviceuser
            items:
              - key: password
                path: serviceuser
                mode: {{ $passwordFileMode }}
            {{- end }}
        {{- end }}
        # TODO: Init SQL scripts